module.exports = {
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 2019,
        sourceType: 'module',
        ecmaFeatures: {
            modules: true,
            jsx: true,
        },
    },
    plugins: [
        '@typescript-eslint/eslint-plugin',
        'react-hooks',
        'modules-newlines',
    ],
    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:react/recommended',
        'plugin:react-hooks/recommended',
    ],
    env: {
        es6: true,
        node: true,
        jest: true,
        browser: true,
        commonjs: true,
    },
    settings: {
        react: {
            version: 'detect',
        },
    },
    rules: {
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/ban-ts-comment': 'off',
        '@typescript-eslint/no-use-before-define': [
            'error',
            {
                functions: true,
                classes: true,
                variables: true,
                typedefs: true,
            },
        ],
        'comma-dangle': ['error', 'always-multiline'],
        'no-shadow': 'off',
        '@typescript-eslint/no-shadow': ['error'],
        'semi': 'off',
        '@typescript-eslint/semi': ['error'],
        'semi-spacing': ['error', { before: false, after: true }],
        'semi-style': ['error', 'last'],
        'max-len': [
            'error',
            {
                code: 140,
                ignoreComments: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
            },
        ],
        'quotes': ['error', 'single', { avoidEscape: true }],
        'prefer-object-spread': 'error',
        'space-before-blocks': 'error',
        'keyword-spacing': 'error',
        'space-in-parens': ['error', 'never'],
        'no-return-await': 'error',
        'no-else-return': 'error',
        'padding-line-between-statements': [
            'error',
            {
                blankLine: 'always',
                prev: '*',
                next: ['return', 'class', 'continue', 'do', 'while', 'for', 'if', 'switch', 'throw', 'try'],
            },
            { blankLine: 'always', prev: ['case', 'default'], next: '*' },
            { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
            { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'] },
            { blankLine: 'always', prev: ['block-like'], next: '*' },
        ],
        'curly': 'error',
        'comma-spacing': ['error', { 'before': false, 'after': true }],
        'object-curly-spacing': ['error', 'always'],
        'array-bracket-spacing': ['error', 'never'],
        'no-return-assign': ['error', 'always'],
        'indent': 'off',
        '@typescript-eslint/indent': ['error', 4, { SwitchCase: 1, ignoredNodes: ['Decorator', 'PropertyDefinition'] }],
        'camelcase': 'error',
        'prefer-template': 'error',
        'object-shorthand': 'error',
        'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1, maxBOF: 0 }],
        'eol-last': ['error', 'always'],
        'no-trailing-spaces': 'error',
        '@typescript-eslint/space-infix-ops': 'error',
        'no-multi-spaces': ['error', { ignoreEOLComments: true }],
        '@typescript-eslint/no-unused-vars': ['warn', { 'ignoreRestSiblings': true }],
        '@typescript-eslint/ban-types': 'off',
        '@typescript-eslint/no-non-null-assertion': 'warn',
        'react-hooks/exhaustive-deps': 'warn',
        'react-hooks/rules-of-hooks': 'error',
        'react/display-name': 'off',
        'react/prop-types': 'off',
        'react/jsx-tag-spacing': [
            'error',
            {
                beforeSelfClosing: 'never',
                beforeClosing: 'never',
            },
        ],
        'react/jsx-closing-tag-location': 'error',
        'react/jsx-curly-spacing': ['error', { when: 'never', children: true }],
        'react/jsx-wrap-multilines': 'error',
        'react/self-closing-comp': 'error',
        'react/jsx-closing-bracket-location': ['error', 'line-aligned'],
        'react/jsx-max-props-per-line': ['error'],
        'no-async-promise-executor': 'off',
        // 'no-console': 'error',
        'prefer-rest-params': 'error',
        'prefer-arrow-callback': 'error',
        'arrow-parens': 'error',
        'implicit-arrow-linebreak': 'error',
        'no-duplicate-imports': 'error',
        'one-var': ['error', 'never'],
        'eqeqeq': ['error', 'always'],
        'no-unneeded-ternary': 'error',
        'brace-style': 'error',
        'spaced-comment': ['error', 'always', { exceptions: ['-', '+', '*'] }],
        'func-call-spacing': ['error', 'never'],
        'object-curly-newline': ['error', {
            'ImportDeclaration': { multiline: true, minProperties: 2 },
        }],
        'modules-newlines/import-declaration-newline': 'error',
        'modules-newlines/export-declaration-newline': 'error',
    },
};
